{
  pkgs,
  lib,
  config,
  ...
}:

{

  sops.secrets.bitwarden-sync_env = {
    sopsFile = ./secrets/bitwarden-sync.env;
    format = "dotenv";
  };
  sops.secrets.vaultwarden_env = {
    sopsFile = ./secrets/vaultwarden.env;
    format = "dotenv";
  };

  virtualisation.oci-containers.containers."bitwarden-sync" = {
    image = "docker.io/martadams89/bitwarden-sync:latest";
    environment = {
      "CRON_SCHEDULE" = "0 */6 * * *";
    };
    environmentFiles = [
      config.sops.secrets.bitwarden-sync_env.path
    ];
    volumes = [
      "/vol/drive/containers/bitwarden/bws-backups:/app/backups:rw"
    ];
    log-driver = "journald";
    labels = {
      "io.containers.autoupdate" = "registry";
    };
    extraOptions = [
      "--network-alias=bitwarden-sync"
      "--network=bitwarden_default"
    ];
  };
  systemd.services."podman-bitwarden-sync" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-bitwarden_default.service"
    ];
    requires = [
      "podman-network-bitwarden_default.service"
    ];
    partOf = [
      "podman-compose-bitwarden-root.target"
    ];
    wantedBy = [
      "podman-compose-bitwarden-root.target"
    ];
  };
  virtualisation.oci-containers.containers."vaultwarden" = {
    image = "docker.io/vaultwarden/server:latest";
    environmentFiles = [
      config.sops.secrets.vaultwarden_env.path
    ];
    volumes = [
      "/vol/drive/containers/bitwarden/vw-data:/data:rw"
    ];
    ports = [
      "8179:80/tcp"
    ];
    log-driver = "journald";
    labels = {
      "io.containers.autoupdate" = "registry";
    };
    extraOptions = [
      "--network-alias=vaultwarden"
      "--network=bitwarden_default"
    ];
  };
  systemd.services."podman-vaultwarden" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-bitwarden_default.service"
    ];
    requires = [
      "podman-network-bitwarden_default.service"
    ];
    partOf = [
      "podman-compose-bitwarden-root.target"
    ];
    wantedBy = [
      "podman-compose-bitwarden-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-bitwarden_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f bitwarden_default";
    };
    script = ''
      podman network inspect bitwarden_default || podman network create bitwarden_default
    '';
    partOf = [ "podman-compose-bitwarden-root.target" ];
    wantedBy = [ "podman-compose-bitwarden-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-bitwarden-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
