# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  ...
}:

{
  sops.secrets.searxng_env = {
    sopsFile = ./secrets/searxng.env;
    format = "dotenv";
  };

  # Containers
  virtualisation.oci-containers.containers."searxng-redis" = {
    image = "docker.io/valkey/valkey:8-alpine";
    volumes = [
      "searxng_valkey-data2:/data:rw"
    ];
    cmd = [
      "valkey-server"
      "--save"
      "30"
      "1"
      "--loglevel"
      "warning"
    ];
    labels = {
      "io.containers.autoupdate" = "registry";
    };
    log-driver = "journald";
    extraOptions = [
      "--cap-add=DAC_OVERRIDE"
      "--cap-add=SETGID"
      "--cap-add=SETUID"
      "--cap-drop=ALL"
      "--network-alias=redis"
      "--network=searxng_searxng"
    ];
  };
  systemd.services."podman-searxng-redis" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-searxng_searxng.service"
      "podman-volume-searxng_valkey-data2.service"
    ];
    requires = [
      "podman-network-searxng_searxng.service"
      "podman-volume-searxng_valkey-data2.service"
    ];
    partOf = [
      "podman-compose-searxng-root.target"
    ];
    wantedBy = [
      "podman-compose-searxng-root.target"
    ];
  };
  virtualisation.oci-containers.containers."searxng-searxng" = {
    image = "docker.io/searxng/searxng:latest";
    environment = {
      "UWSGI_THREADS" = "4";
      "UWSGI_WORKERS" = "4";
    };
    environmentFiles = [
      config.sops.secrets.searxng_env.path
    ];
    volumes = [
      "/vol/drive/containers/searxng/searxng:/etc/searxng:rw"
    ];
    ports = [
      "5947:8080/tcp"
    ];
    labels = {
      "io.containers.autoupdate" = "registry";
    };
    dependsOn = [
      "searxng-redis"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=CHOWN"
      "--cap-add=SETGID"
      "--cap-add=SETUID"
      "--cap-drop=ALL"
      "--network-alias=searxng"
      "--network=searxng_searxng"
    ];
  };
  systemd.services."podman-searxng-searxng" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-searxng_searxng.service"
    ];
    requires = [
      "podman-network-searxng_searxng.service"
    ];
    partOf = [
      "podman-compose-searxng-root.target"
    ];
    wantedBy = [
      "podman-compose-searxng-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-searxng_searxng" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f searxng_searxng";
    };
    script = ''
      podman network inspect searxng_searxng || podman network create searxng_searxng
    '';
    partOf = [ "podman-compose-searxng-root.target" ];
    wantedBy = [ "podman-compose-searxng-root.target" ];
  };

  # Volumes
  systemd.services."podman-volume-searxng_valkey-data2" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect searxng_valkey-data2 || podman volume create searxng_valkey-data2
    '';
    partOf = [ "podman-compose-searxng-root.target" ];
    wantedBy = [ "podman-compose-searxng-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-searxng-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
